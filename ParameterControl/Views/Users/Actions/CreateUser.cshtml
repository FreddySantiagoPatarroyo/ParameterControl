@using ParameterControl.Models.User
@model UserCreateViewModel;

@{
    ViewData["Title"] = "Crear Usuarios";
    string ErrorSuccess = "Se genero un problema al obtener la informacion,Users";
}

<partial name="_Menu" />

@if (!ViewBag.Success)
{
    <partial name="_ModalError" model="ErrorSuccess" />
}
else
{
    <div class="box_create">
        <div class="bg__blur"></div>

        <div asp-validation-summary="ModelOnly" class="text_error"></div>

        <form class="form__container">
            <div class="card__container">
                <div class="header_form">
                    <img src="/images/iconApple.png" />
                    <h1>Crear Usuario</h1>
                </div>

                <input type="hidden" asp-for="Code" />
                <input type="hidden" asp-for="CreationDate" />

                @*   <div class="form_group">
                <div class="field">
                <label asp-for="Code" class="label_form">Código usuario*</label>
                <div class="input">
                <input asp-for="Code" placeholder="Codigo" autocomplete="off" />
                </div>
                <span id="CodeError" class="text_error"></span>
                </div>
                </div> *@

                <div class="form_group">
                    <div class="field">
                        <label asp-for="User_" class="label_form">Usuario*</label>
                        <div class="input">
                            <input asp-for="User_" placeholder="Usuario" autocomplete="off" />
                        </div>
                        <span id="User_Error" class="text_error"></span>
                    </div>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Email" class="label_form">Email*</label>
                        <div class="input">
                            <input asp-for="Email" placeholder="Email" />
                        </div>
                        <span id="EmailError" class="text_error"></span>
                    </div>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Name" class="label_form">Nombre de usuario*</label>
                        <div class="input">
                            <input asp-for="Name" placeholder="Nombre de usuario" autocomplete="off" />
                        </div>
                        <span id="NameError" class="text_error"></span>
                    </div>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="RolCode" class="label_form">Rol*</label>
                        <div id="input_select" class="input">
                            <input class="input_select" id="input_select_filter" asp-for="RolName" name="input_select_filter" placeholder="Seleccione una opción" onclick="showOptions()" readonly />
                            <input asp-for="RolCode" class="oculte" />
                            <i class="icon icon_select icon_153" onclick="showOptions()"></i>
                        </div>
                        <div id="options" class="options">
                            <ul class="options_list">
                                <li onclick="selectOption('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.Roles)
                                {
                                    <li onclick="selectOption('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper" class="select_helper" onclick="showOptions()"></div>
                    </div>

                    <span id="RolError" class="text_error"></span>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Password" class="label_form">Contraseña*</label>
                        <div class="input">
                            <input type="password" asp-for="Password" placeholder="Contraseña" autocomplete="off" />
                        </div>
                        <span id="PasswordError" class="text_error"></span>
                    </div>
                </div>

                <p class="note_text"><span>Nota: </span>Los campos con (*) son obligatorios</p>

                <div id="btn_container" class="btn_container">
                    <a class="button button_secondary" asp-controller="Users" asp-action="Users"><p class="text font_bold">Cancelar</p></a>
                    <a href="javascript:void(0)" onclick="sendData()" class="button button_primary"><p class="text font_bold">Crear</p></a>
                </div>
                <div id="loading" class="loading">
                    <span class="loader"></span>
                </div>
                <div id="LayoytError" class="layout_content">
                    <partial name="_MessageError"/>
                </div>
                <div id="LayoytSuccess" class="layout_content">
                    <partial name="_MessageSuccess"/>
                </div>
            </div>
        </form>
    </div>

    @section Scripts {

        <script>
            /* ----------- Select de roles ----------- */
            let viewOptions = false;

            const showOptions = () => {

                let widthOption = document.getElementById("input_select").clientWidth;
                let options = document.getElementById("options");
                options.style.width = widthOption + "px";

                viewOptions = !viewOptions;

                if (viewOptions) {
                    document.getElementById('options').style.display = 'block';
                    document.getElementById('select_helper').style.display = 'block';
                } else {
                    document.getElementById('options').style.display = 'none';
                    document.getElementById('select_helper').style.display = 'none';
                }
            }

            const selectOption = (name, value) => {

                if (name == null || value == null || name == '' || value == '') {
                    console.log("vacio");
                    document.getElementById("input_select_filter").value = '';
                document.getElementById("RolCode").value = '';
                } else {
                    console.log(value);
                    document.getElementById("input_select_filter").value = name;
                document.getElementById("RolCode").value = value;
                }
                showOptions();
            }
        </script>

        <script>
            const urlUser = '@Url.Action("CreateUser")';
            let data;
            // let isValidCode = false;
            let isValidUser_ = false;
            let isValidEmail = false;
            let isValidName = false;
            let isValidRol = false;
            let isValidPassword = false;

            const sendData = async () => {
                // isValidCode = validateInput("Code", "El codigo de usuario es requerido", "CodeError");
                isValidUser_ = validateInput("User_", "El usuario es requerido", "User_Error");
                isValidEmail = await validateEmail("Email", "El Email es requerido", "Digite un email válido", "Este email ya se ecuentra registrado", "EmailError");
                isValidName = await validateUserName("Name", "El nombre de usuario es requerido", "Este nombre de usuario ya se ecuentra registrado", "NameError");
                isValidRol = validateInput("input_select_filter", "El rol es requerido", "RolError");
                isValidPassword = validateInput("Password", "La contraseña es requerida", "PasswordError");

                console.log(isValidName);
                console.log(isValidEmail);

                if (isValidUser_ && isValidEmail && isValidName && isValidRol && isValidPassword) {
                    document.getElementById('btn_container').style.display = 'none';
                    document.getElementById('loading').style.display = 'flex';

                    data = {
                        // Code: $('#Code').val(),
                        User_: $('#User_').val(),
                        Email: $('#Email').val(),
                        Name: $('#Name').val(),
                        RolCode: $('#RolCode').val(),
                        Password: $('#Password').val(),
                        FirstAccess: false,
                        State: true,
                    }

                    console.log(data)

                    const result = await fetch(urlUser, {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })

                    const json = await result.json();

                    console.log(json);

                    if (json.state == "Success") {
                        document.getElementById('LayoytSuccess').style.display = 'block';
                        document.getElementById('layout_message_success').innerHTML = json.message;
                        document.getElementById('loading').style.display = 'none';
                        setTimeout(() => {
                            location.href = '/Users/Users';
                        }, 3000)
                    } else {
                        document.getElementById('LayoytError').style.display = 'block';
                        document.getElementById('layout_message_error').innerHTML = json.message;
                        document.getElementById('loading').style.display = 'none';
                    }
                }
            }

            const validateEmpty = (idInput) => {
                if ($(`#${idInput}`).val() == "" || $(`#${idInput}`).val() == null) {
                    return true;
                } else {
                    return false;
                }
            }

            const validateDataRepeat = async (idInput, typeData) => {
                const value = $(`#${idInput}`).val();
                const urlValidateRepeat = '@Url.Action("ValidateDataRepeatCreate")';

                const data = `${typeData},${value}`

                const result = await fetch(urlValidateRepeat, {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })

                const json = await result.json();
                return json;
            }

            const validateInput = (idInput, requiredMessage, idError) => {
                const isEmpty = validateEmpty(idInput);
                if (isEmpty) {
                    $(`#${idError}`).text(requiredMessage);
                    return false;
                } else {
                    $(`#${idError}`).text("");
                    return true;
                }
            }

            const validateEmail = async (idInput, requiredMessage, formatMessage, repeatError, idError) => {
                const email = $(`#${idInput}`).val();
                const emailFormat = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
                const isEmpty = validateEmpty(idInput);
                let isRepeat = false;

                if (!isEmpty) {
                    isRepeat = await validateDataRepeat(idInput, "Email");
                }
                
                if (isEmpty) {
                    $(`#${idError}`).text(requiredMessage);
                    return false;
                } else if (!emailFormat.test(email)) {
                    $(`#${idError}`).text(formatMessage);
                    return false;
                } else if (isRepeat) {
                    $(`#${idError}`).text(repeatError);
                    return false;
                }
                else {
                    console.log("es valido");
                    $(`#${idError}`).text("");
                    return true;
                }
            }

            const validateUserName = async (idInput, requiredMessage, repeatError, idError) => {
                const userName = $(`#${idInput}`).val();
                const isEmpty = validateEmpty(idInput);
                let isRepeat = false;

                if (!isEmpty) {
                    isRepeat = await validateDataRepeat(idInput, "Name");
                }

                if (isEmpty) {
                    $(`#${idError}`).text(requiredMessage);
                    return false;
                } else if (isRepeat) {
                    $(`#${idError}`).text(repeatError);
                    return false;
                }
                else {
                    $(`#${idError}`).text("");
                    return true;
                }
            }
        </script>
    }

}