@using ParameterControl.Models.Policy;
@model PolicyCreateViewModel;

@{
    ViewData["Title"] = "Editar Politicas";
    string ErrorEntyNull = "No existe una politica con el codigo " + ViewBag.CodeSend + ",Policies";
    string ErrorSuccess = "Se genero un problema al obtener la informacion,Policies";
}

<partial name="_Menu" />

@if (!ViewBag.Success)
{
    <partial name="_ModalError" model="ErrorSuccess" />
}
else
{
    @if (ViewBag.EntyNull)
    {
        <partial name="_ModalError" model="ErrorEntyNull" />
    }
    else
    {
        <div class="box_edit">
            <div class="bg__blur"></div>

            <div asp-validation-summary="ModelOnly" class="text_error"></div>

            <form class="form__container">
                <div class="card__container">
                    <div class="header_form">
                        <img src="/images/iconApple.png" />
                        <h1>Editar Politica</h1>
                    </div>

                    <input type="hidden" asp-for="Code" />
                    @* <input type="hidden" asp-for="CreationDate" /> *@

                    <div class="form_group">
                        <div class="field">
                            <label asp-for="CodeFormat" class="label_form">Código*</label>
                            <div class="input">
                                <input asp-for="CodeFormat" placeholder="Codigo" readonly />
                            </div>
                            <span id="CodeError" class="text_error"></span>
                        </div>
                    </div>

                    <div class="form_group">
                        <div class="field">
                            <label asp-for="Name" class="label_form">Nombre*</label>
                            <div class="input">
                                <input asp-for="Name" placeholder="Nombre" readonly />
                            </div>
                            <span id="NameError" class="text_error"></span>
                        </div>
                    </div>

                    <div class="form_group">
                        <div class="field">
                            <label asp-for="Description" class="label_form">Descripcion*</label>
                            <div class="textarea">
                                <textarea asp-for="Description" placeholder="Descripcion"></textarea>
                            </div>
                            <span id="DescriptionError" class="text_error"></span>
                        </div>
                    </div>

                    <p class="note_text"><span>Nota: </span>Los campos con (*) son obligatorios</p>

                    <div id="btn_container" class="btn_container">
                        <a class="button button_secondary" asp-controller="Policies" asp-action="Policies"><p class="text font_bold">Cancelar</p></a>
                        <a href="javascript:void(0)" onclick="sendData()" class="button button_primary"><p class="text font_bold">Actualizar</p></a>
                    </div>
                    <div id="loading" class="loading">
                        <span class="loader"></span>
                    </div>
                    <div id="LayoytError" class="layout_content">
                        <partial name="_MessageError" />
                    </div>
                    <div id="LayoytSuccess" class="layout_content">
                        <partial name="_MessageSuccess" />
                    </div>
                </div>
            </form>
        </div>

        @section Scripts {
    <partial name="_ValidationScriptsPartial.cshtml" />

    <script>
        const urlPolicy = '@Url.Action("Edit")';
                let data;
                let isValidCode = false;
                let isValidName = false;
                let isValidDescription = false;

                const sendData = async () => {
                    isValidCode = validateInputEmpty("Code", "El codigo es requerido", "CodeError");
                    isValidName = validateInputEmpty("Name", "El nombre es requerido", "NameError");
                    isValidDescription = validateInputEmpty("Description", "La descripcion es requerido", "DescriptionError");

                    if (isValidCode && isValidName && isValidDescription) {
                        document.getElementById('btn_container').style.display = 'none';
                        document.getElementById('loading').style.display = 'flex';

                        //const CreationDateFormat = FormatDate($('#CreationDate').val());

                        data = {
                            Code: $('#Code').val(),
                            Name: $('#Name').val(),
                            Description: $('#Description').val(),
                            State: true,
                            //CreationDate: new Date(CreationDateFormat)
                        }

                        console.log(data)

                        const result = await fetch(urlPolicy, {
                            method: 'POST',
                            body: JSON.stringify(data),
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })

                        const json = await result.json();

                        console.log(json);

                        if (json.state == "Success") {
                            document.getElementById('LayoytSuccess').style.display = 'block';
                            document.getElementById('layout_message_success').innerHTML = json.message;
                            document.getElementById('loading').style.display = 'none';
                            setTimeout(() => {
                                location.href = '/Policies/Policies';
                            }, 3000)
                        } else {
                            document.getElementById('LayoytError').style.display = 'block';
                            document.getElementById('layout_message_error').innerHTML = json.message;
                            document.getElementById('loading').style.display = 'none';
                        }
                    }
                }

                const validateInputEmpty = (idInput, messaje, idError) => {
                    if ($(#${ idInput }).val() == "" || $(#${ idInput }).val() == null) {
                        $(#${ idError }).text(${ messaje });
                        return false;
                    } else {
                        $(#${ idError }).text("");
                        return true;
                    }
                }

                // const FormatDate = (date) => {

                //      const validateAm = date.toString().includes("a. m.");
                //      const validatePm = date.toString().includes("p. m.");

                //      if (validateAm) {
                //          date = date.replace("a. m.", "AM")
                //      }

                //      if (validatePm) {
                //          date = date.replace("p. m.", "PM")
                //      }

                //      return date;
                //  }
            </script>
        }
    }
}
