@using ParameterControl.Models.Conciliation;
@model ConciliationCreateViewModel;
@{
    ViewData["Title"] = "Crear Conciliaciones";
    string ErrorSuccess = "Se genero un problema al obtener la informacion,Conciliations";
}

<partial name="_Menu" />

@if (!ViewBag.Success)
{
    <partial name="_ModalError" model="ErrorSuccess" />
}
else
{
    <div class="box_create">
        <div class="bg__blur"></div>

        <div asp-validation-summary="ModelOnly" class="text_error"></div>

        <form class="form__container">
            <div class="card__container">
                <div class="header_form">
                    <img src="/images/iconApple.png" />
                    <h1>Crear Conciliación</h1>
                </div>

                @*  <div class="form_group">
            <div class="field">
            <label asp-for="Code" class="label_form">Código*</label>
            <div class="input">
            <input  asp-for="Code" placeholder="Digite el Codigo" autocomplete="off" />
            </div>
            <span id="CodeError" class="text_error"></span>
            </div>
            </div> *@

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Name" class="label_form">Nombre*</label>
                        <div class="input">
                            <input asp-for="Name" placeholder="Nombre de la conciliación" autocomplete="off" />
                        </div>
                        <span id="NameError" class="text_error"></span>
                    </div>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Email" class="label_form">Email*</label>
                        <div id="input_select_emails" class="input">
                            <input class="input_select" id="input_select_filter_emails" name="input_select_filter_emails" asp-for="Email" placeholder="Seleccione una opción" onclick="showOptionsEmails()" readonly />
                            <input asp-for="Email" class="oculte" />
                            <i class="icon icon_select icon_153"></i>
                        </div>
                        <div id="optionsEmails" class="options">
                            <ul class="options_list">
                                <li onclick="selectOptionEmails('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.Emails)
                                {
                                    <li onclick="selectOptionEmails('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper_emails" class="select_helper" onclick="showOptionsEmails()"></div>
                    </div>

                    <span id="EmailError" class="text_error"></span>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Destination" class="label_form">Tabla Destino*</label>
                        <div id="input_select_destination" class="input">
                            <input class="input_select" id="input_select_filter_destination" name="input_select_filter_destination" asp-for="Destination" placeholder="Seleccione una opción" onclick="showOptionsDestination()" readonly />
                            <input asp-for="Destination" class="oculte" />
                            <i class="icon icon_select icon_153"></i>
                        </div>
                        <div id="optionsDestination" class="options">
                            <ul class="options_list">
                                <li onclick="selectOptionDestination('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.SelectDestination)
                                {
                                    <li onclick="selectOptionDestination('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper_destination" class="select_helper" onclick="showOptionsDestination()"></div>
                    </div>
                    @*   <span id="DestinationlError" class="text_error"></span> *@
                </div>


                @*  <div class="form_group">
            <div class="field">
            <label asp-for="Destination" class="label_form">Destino</label>
            <div class="input">
            <input  asp-for="Destination" placeholder="Digite la tabla de Destino" autocomplete="off">
            </div>
            </div>
            </div> *@

                <div class="form_group">
                    <div class="field">
                        <label asp-for="ControlType" class="label_form">Tipo control*</label>
                        <div class="input">
                            <input asp-for="ControlType" placeholder="Tipo de control" autocomplete="off" maxlength="1" />
                        </div>
                        <span id="ControlTypeError" class="text_error"></span>
                    </div>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="OperationType" class="label_form">Tipo de operacion*</label>
                        <div id="input_select" class="input">
                            <input class="input_select" id="input_select_filter" name="input_select_filter" asp-for="OperationType" placeholder="Seleccione una opción" onclick="showOptions()" readonly />
                            <input asp-for="OperationType" class="oculte" />
                            <i class="icon icon_select icon_153"></i>
                        </div>
                        <div id="options" class="options">
                            <ul class="options_list">
                                <li onclick="selectOption('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.OperationTypeOptions)
                                {
                                    <li onclick="selectOption('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper" class="select_helper" onclick="showOptions()"></div>
                    </div>

                    <span id="OperationTypeError" class="text_error"></span>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Policy" class="label_form">Politicas*</label>
                        <div id="input_select_policies" class="input">
                            <input class="input_select" id="input_select_filter_policies" asp-for="Policy" placeholder="Seleccione una opción" onclick="showOptionsPolicies()" readonly />
                            <input asp-for="PolicyCode" class="oculte" />
                            <i class="icon icon_select icon_153"></i>
                        </div>
                        <div id="options_policies" class="options">
                            <ul class="options_list">
                                <li onclick="selectOptionPolicies('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.PoliciesOption)
                                {
                                    <li onclick="selectOptionPolicies('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper_policies" class="select_helper" onclick="showOptionsPolicies()"></div>
                    </div>

                    <span id="PolicyError" class="text_error"></span>
                </div>

                <div class="form_group">
                    <div class="field">
                        <label asp-for="Required" class="label_form">Requiere Aprobación de Resultado*</label>
                        <div id="input_select_required" class="input">
                            <input class="input_select" id="input_select_filter_required" asp-for="RequiredFormat" placeholder="Seleccione una opción" onclick="showOptionsRequired()" readonly />
                            <input asp-for="Required" class="oculte" />
                            <i class="icon icon_select icon_153"></i>
                        </div>
                        <div id="options_required" class="options">
                            <ul class="options_list">
                                <li onclick="selectOptionRequired('@null', '@null')" class="option">
                                    <p class="option_text">Seleccione una opción</p>
                                </li>
                                @foreach (var Option in Model.RequiredOption)
                                {
                                    <li onclick="selectOptionRequired('@Option.Text', '@Option.Value')" class="option">
                                        <p class="option_text">@Option.Text</p>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div id="select_helper_required" class="select_helper" onclick="showOptionsRequired()"></div>
                    </div>
                    <span id="RequiredError" class="text_error"></span>
                </div>

                <p class="note_text"><span>Nota: </span>Los campos con (*) son obligatorios</p>

                <div id="btn_container" class="btn_container">
                    <a class="button button_secondary" asp-controller="Conciliations" asp-action="Conciliations"><p class="text font_bold">Cancelar</p></a>
                    <a href="javascript:void(0)" onclick="sendData()" class="button button_primary"><p class="text font_bold">Crear</p></a>
                </div>

                <div id="loading" class="loading">
                    <span class="loader"></span>
                </div>
                <div id="LayoytError" class="layout_content">
                    <partial name="_MessageError" />
                </div>
                <div id="LayoytSuccess" class="layout_content">
                    <partial name="_MessageSuccess" />
                </div>
            </div>
        </form>
    </div>

    @section Scripts {
        <partial name="_ValidationScriptsPartial.cshtml" />
        <script>
            /* ----------- Select de tipo de operacion ----------- */
            let viewOptions = false;

            const showOptions = () => {

                let widthOption = document.getElementById("input_select").clientWidth;
                let options = document.getElementById("options");
                options.style.width = widthOption + "px";

                viewOptions = !viewOptions;

                if (viewOptions) {
                    document.getElementById('options').style.display = 'block';
                    document.getElementById('select_helper').style.display = 'block';
                } else {
                    document.getElementById('options').style.display = 'none';
                    document.getElementById('select_helper').style.display = 'none';
                }
            }

            const selectOption = (name, value) => {

                if (name == null || value == null || name == '' || value == '') {
                    console.log("vacio");
                    document.getElementById("input_select_filter").value = '';
                    document.getElementById("OperationType").value = '';
                } else {
                    console.log(value);
                    document.getElementById("input_select_filter").value = name;
                    document.getElementById("OperationType").value = value;
                }
                showOptions();
            }

            /* ----------- Select de emails ----------- */
            let viewOptionsEmails = false;

            const showOptionsEmails = () => {

                let widthOptionEmails = document.getElementById("input_select_emails").clientWidth;
                let optionsEmails = document.getElementById("optionsEmails");
                optionsEmails.style.width = widthOptionEmails + "px";

                viewOptionsEmails = !viewOptionsEmails;

                if (viewOptionsEmails) {
                    document.getElementById('optionsEmails').style.display = 'block';
                    document.getElementById('select_helper_emails').style.display = 'block';
                } else {
                    document.getElementById('optionsEmails').style.display = 'none';
                    document.getElementById('select_helper_emails').style.display = 'none';
                }
            }

            /* ----------- Select de destination ----------- */
            let viewOptionsDestination = false;

            const showOptionsDestination = () => {

                let widthOptionDestination = document.getElementById("input_select_destination").clientWidth;
                let optionsDestination = document.getElementById("optionsDestination");
                optionsDestination.style.width = widthOptionDestination + "px";

                viewOptionsDestination = !viewOptionsDestination;

                if (viewOptionsDestination) {
                    document.getElementById('optionsDestination').style.display = 'block';
                    document.getElementById('select_helper_destination').style.display = 'block';
                } else {
                    document.getElementById('optionsDestination').style.display = 'none';
                    document.getElementById('select_helper_destination').style.display = 'none';
                }
            }

            const selectOptionEmails = (name, value) => {

                if (name == null || value == null || name == '' || value == '') {
                    console.log("vacio");
                    document.getElementById("input_select_filter_emails").value = '';
                    document.getElementById("Email").value = '';
                } else {
                    console.log(value);
                    document.getElementById("input_select_filter_emails").value = name;
                    document.getElementById("Email").value = value;
                }
                showOptionsEmails();
            }

            /* ----------- Select de politicas ----------- */
            let viewOptionsPolicies = false;

            const showOptionsPolicies = () => {

                let widthOptionPolicies = document.getElementById("input_select_policies").clientWidth;
                let optionsPolicies = document.getElementById("options_policies");
                optionsPolicies.style.width = widthOptionPolicies + "px";

                viewOptionsPolicies = !viewOptionsPolicies;

                if (viewOptionsPolicies) {
                    document.getElementById('options_policies').style.display = 'block';
                    document.getElementById('select_helper_policies').style.display = 'block';
                } else {
                    document.getElementById('options_policies').style.display = 'none';
                    document.getElementById('select_helper_policies').style.display = 'none';
                }
            }

            const selectOptionPolicies = (name, value) => {

                if (name == null || value == null || name == '' || value == '') {
                    console.log("vacio");
                    document.getElementById("input_select_filter_policies").value = '';
                    document.getElementById("PolicyCode").value = '';
                } else {
                    console.log(value);
                    document.getElementById("input_select_filter_policies").value = name;
                    document.getElementById("PolicyCode").value = value;
                }

                showOptionsPolicies();
            }

            /* ----------- Select de requerido ----------- */
            let viewOptionsRequired = false;

            const showOptionsRequired = () => {

                let widthOptionRequired = document.getElementById("input_select_required").clientWidth;
                let optionsRequired = document.getElementById("options_required");
                optionsRequired.style.width = widthOptionRequired + "px";

                viewOptionsRequired = !viewOptionsRequired;

                if (viewOptionsRequired) {
                    document.getElementById('options_required').style.display = 'block';
                    document.getElementById('select_helper_required').style.display = 'block';
                } else {
                    document.getElementById('options_required').style.display = 'none';
                    document.getElementById('select_helper_required').style.display = 'none';
                }
            }

            const selectOptionRequired = (name, value) => {

                if (name == null || value == null || name == '' || value == '') {
                    console.log("vacio");
                    document.getElementById("input_select_filter_required").value = '';
                    document.getElementById("Required").value = '';
                } else {
                    console.log(value);
                    document.getElementById("input_select_filter_required").value = name;
                    document.getElementById("Required").value = value;
                }

                showOptionsRequired();
            }
        </script>


        <script>
            const urlCreateConciliation = '@Url.Action("Create")';
            let data;
            let isValidName = false;
            let isValidEmail = false;
            //let isValidDestination = false;
            let isValidPolicy = false;
            let isValidRequired = false;
            let isValidControlType = false;
            let isValidOperationType = false;

            const sendData = async () => {
                isValidName = validateInputEmpty("Name", "El nombre es requerido", "NameError");
                isValidEmail = validateEmail("Email", "El Email es requerido", "Digite un email válido", "EmailError");
                // isValidDestination = validateInputEmpty("Destination", "El destino es requerido", "DestinationError");
                isValidPolicy = validateInputEmpty("input_select_filter_policies", "La politica es requerida", "PolicyError");
                isValidRequired = validateInputEmpty("input_select_filter_required", "Este campo es requerido", "RequiredError");
                isValidControlType = validateInputEmpty("ControlType", "El tipo de control es requerido", "ControlTypeError");
                isValidOperationType = validateInputEmpty("OperationType", "El tipo de operacion es requerido", "OperationTypeError");


                if (isValidName && isValidEmail && isValidPolicy && isValidRequired && validateInputEmpty && isValidOperationType) {
                    document.getElementById('btn_container').style.display = 'none';
                    document.getElementById('loading').style.display = 'flex';

                    data = {
                        Name: $('#Name').val(),
                        Email: $('#Email').val(),
                        Destination: $('#Destination').val(),
                        Policy: $('#input_select_filter_policies').val(),
                        PolicyCode: $('#PolicyCode').val(),
                        Required: $('#Required').val(),
                        ControlType: $('#ControlType').val(),
                        OperationType: $('#OperationType').val(),
                        State: true
                    }

                    console.log(data)

                    const result = await fetch(urlCreateConciliation, {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })

                    const json = await result.json();

                    console.log(json);

                    if (json.state == "Success") {
                        document.getElementById('LayoytSuccess').style.display = 'block';
                        document.getElementById('layout_message_success').innerHTML = json.message;
                        document.getElementById('loading').style.display = 'none';
                        setTimeout(() => {
                            location.href = '/Conciliations/Conciliations';
                        }, 3000)
                    } else {
                        document.getElementById('LayoytError').style.display = 'block';
                        document.getElementById('layout_message_error').innerHTML = json.message;
                        document.getElementById('loading').style.display = 'none';
                    }
                }
            }

            const validateInputEmpty = (idInput, messaje, idError) => {
                if ($(`#${idInput}`).val() == "" || $(`#${idInput}`).val() == null) {
                    $(`#${idError}`).text(`${messaje}`);
                    return false;
                } else {
                    $(`#${idError}`).text("");
                    return true;
                }
            }

            const validateEmail = (idInput, requiredMessage, formatMessage, idError) => {
                const email = $(`#${idInput}`).val();
                const emailFormat = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

                if (!email) {
                    $(`#${idError}`).text(requiredMessage);
                    return false;
                } else if (!emailFormat.test(email)) {
                    $(`#${idError}`).text(formatMessage);
                    return false;
                } else {
                    $(`#${idError}`).text("");
                    return true;
                }
            }
        </script>
    }
}