@using ParameterControl.Models.Conciliation;
@model ConciliationCreateViewModel;

@{
    ViewData["Title"] = "Editar Conciliaciones";
    string MessageError = "Error al actualizar una conciliacion";
    string MessageSuccess = "La conciliacion se actualizo correctamente";
}

<partial name="_Menu" />

<div class="box_edit">
    <div class="bg__blur"></div>
    <div asp-validation-summary="ModelOnly" class="text_error"></div>

    <form class="form__container">
        <div class="card__container">
            <div class="header_form">
                <img src="/images/iconApple.png" />
                <h1>Editar Conciliación</h1>
            </div>

           <input type="hidden" asp-for="Code"/> 
           <input type="hidden" asp-for="CreationDate"/>

            <div class="form_group">
                <div class="field">
                    <label asp-for="CodeFormat" class="label_form">Código*</label>
                    <div class="input">
                        <input asp-for="CodeFormat" placeholder="Digite el codigo" readonly />
                    </div>
                    <span id="CodeError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Name" class="label_form">Nombre*</label>
                    <div class="input">
                        <input asp-for="Name" placeholder="Digite el nombre" />
                    </div>
                    <span id="NameError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label  asp-for="Email" class="label_form">Email Usuario Asignado*</label>
                    <div class="input">
                        <input asp-for="Email" placeholder="Digite el email">
                    </div>
                    <span id="EmailError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Destination" class="label_form">Destino</label>
                    <div class="input">
                        <input asp-for="Destination" placeholder="Digite el destino">
                    </div>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="ControlType" class="label_form">Tipo control*</label>
                    <div class="input">
                        <input asp-for="ControlType" placeholder="Tipo de control" autocomplete="off" maxlength="1"/>
                    </div>
                    <span id="ControlTypeError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="OperationType" class="label_form">Tipo de operacion*</label>
                    <div id="input_select" class="input">
                        <input class="input_select" id="input_select_filter" name="input_select_filter" asp-for="OperationType" placeholder="Seleccione una opción" onclick="showOptions()" readonly />
                        <input asp-for="OperationType" class="oculte" />
                        <i class="icon icon_select icon_153"></i>
                    </div>
                    <div id="options" class="options">
                        <ul class="options_list">
                            <li onclick="selectOption('@null', '@null')" class="option">
                                <p class="option_text">Seleccione una opción</p>
                            </li>
                            @foreach (var Option in Model.OperationTypeOptions)
                            {
                                <li onclick="selectOption('@Option.Text', '@Option.Value')" class="option">
                                    <p class="option_text">@Option.Text</p>
                                </li>
                            }
                        </ul>
                    </div>
                    <div id="select_helper" class="select_helper" onclick="showOptions()"></div>
                </div>

                <span id="OperationTypeError" class="text_error"></span>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Policy" class="label_form">Politicas*</label>
                    <div id="input_select_policies" class="input">
                        <input class="input_select" id="input_select_filter_policies" asp-for="Policy" placeholder="Seleccione una opción" onclick="showOptionsPolicies()" readonly />
                        <input class="oculte" asp-for="PolicyCode" />
                        <i class="icon icon_select icon_153"></i>
                    </div>
                    <div id="options_policies" class="options">
                        <ul class="options_list">
                            <li onclick="selectOptionPolicies('@null', '@null')" class="option">
                                <p class="option_text">Seleccione una opción</p>
                            </li>
                            @foreach (var Option in Model.PoliciesOption)
                            {
                                <li onclick="selectOptionPolicies('@Option.Text', '@Option.Value')" class="option">
                                    <p class="option_text">@Option.Text</p>
                                </li>
                            }
                        </ul>
                    </div>
                    <div id="select_helper_policies" class="select_helper" onclick="showOptionsPolicies()"></div>
                </div>

                <span id="PoliciesError" class="text_error"></span>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Required" class="label_form">Requiere Aprobación de Resultado*</label>
                    <div id="input_select_required" class="input">
                        <input class="input_select" id="input_select_filter_required" asp-for="RequiredFormat" placeholder="Seleccione una opción" onclick="showOptionsRequired()" />
                        <input class="oculte" asp-for="Required" />
                        <i class="icon icon_select icon_153"></i>
                    </div>
                    <div id="options_required" class="options">
                        <ul class="options_list">
                            <li onclick="selectOptionRequired('@null', '@null')" class="option">
                                <p class="option_text">Seleccione una opción</p>
                            </li>
                            @foreach (var Option in Model.RequiredOption)
                            {
                                <li onclick="selectOptionRequired('@Option.Text', '@Option.Value')" class="option">
                                    <p class="option_text">@Option.Text</p>
                                </li>
                            }
                        </ul>
                    </div>
                    <div id="select_helper_required" class="select_helper" onclick="showOptionsRequired()"></div>
                </div>
                <span id="RequiredError" class="text_error"></span>
            </div>
            <p class="note_text"><span>Nota: </span>Los campos con (*) son obligatorios</p>

            <div id="btn_container" class="btn_container">
                <a class="button button_secondary" asp-controller="Conciliations" asp-action="Conciliations"><p class="text font_bold">Cancelar</p></a>
                <a href="javascript:void(0)" onclick="sendData()" class="button button_primary"><p class="text font_bold">Actualizar</p></a>
            </div>
            <div id="loading" class="loading">
                <span class="loader"></span>
            </div>
            <div id="LayoytError" class="layout_content">
                <partial name="_MessageError" model="MessageError" />
            </div>
            <div id="LayoytSuccess" class="layout_content">
                <partial name="_MessageSuccess" model="MessageSuccess" />
            </div>
        </div>
    </form>
</div>



@section Scripts {
    <partial name="_ValidationScriptsPartial.cshtml" />
    <script>
        /* ----------- Select de tipo de operacion ----------- */
        let viewOptions = false;

        const showOptions = () => {

            let widthOption = document.getElementById("input_select").clientWidth;
            let options = document.getElementById("options");
            options.style.width = widthOption + "px";

            viewOptions = !viewOptions;

            if (viewOptions) {
                document.getElementById('options').style.display = 'block';
                document.getElementById('select_helper').style.display = 'block';
            } else {
                document.getElementById('options').style.display = 'none';
                document.getElementById('select_helper').style.display = 'none';
            }
        }

        const selectOption = (name, value) => {

            if (name == null || value == null || name == '' || value == '') {
                console.log("vacio");
                document.getElementById("input_select_filter").value = '';
                document.getElementById("OperationType").value = '';
            } else {
                console.log(value);
                document.getElementById("input_select_filter").value = name;
                document.getElementById("OperationType").value = value;
            }
            showOptions();
        }

        /* ----------- Select de politicas ----------- */
        let viewOptionsPolicies = false;

        const showOptionsPolicies = () => {

            let widthOptionPolicies = document.getElementById("input_select_policies").clientWidth;
            let optionsPolicies = document.getElementById("options_policies");
            optionsPolicies.style.width = widthOptionPolicies + "px";

            viewOptionsPolicies = !viewOptionsPolicies;

            if (viewOptionsPolicies) {
                document.getElementById('options_policies').style.display = 'block';
                document.getElementById('select_helper_policies').style.display = 'block';
            } else {
                document.getElementById('options_policies').style.display = 'none';
                document.getElementById('select_helper_policies').style.display = 'none';
            }
        }

        const selectOptionPolicies = (name, value) => {

            if (name == null || value == null || name == '' || value == '') {
                console.log("vacio");
                document.getElementById("input_select_filter_policies").value = '';
                document.getElementById("PolicyCode").value = '';
            } else {
                console.log(value);
                document.getElementById("input_select_filter_policies").value = name;
                document.getElementById("PolicyCode").value = value;
            }

            showOptionsPolicies();
        }

        /* ----------- Select de requerido ----------- */
        let viewOptionsRequired = false;

        const showOptionsRequired = () => {

            let widthOptionRequired = document.getElementById("input_select_required").clientWidth;
            let optionsRequired = document.getElementById("options_required");
            optionsRequired.style.width = widthOptionRequired + "px";

            viewOptionsRequired = !viewOptionsRequired;

            if (viewOptionsRequired) {
                document.getElementById('options_required').style.display = 'block';
                document.getElementById('select_helper_required').style.display = 'block';
            } else {
                document.getElementById('options_required').style.display = 'none';
                document.getElementById('select_helper_required').style.display = 'none';
            }
        }

        const selectOptionRequired = (name, value) => {

            if (name == null || value == null || name == '' || value == '') {
                console.log("vacio");
                document.getElementById("input_select_filter_required").value = '';
                document.getElementById("Required").value = '';
            } else {
                console.log(value);
                document.getElementById("input_select_filter_required").value = name;
                document.getElementById("Required").value = value;
            }

            showOptionsRequired();
        }
    </script>


    <script>
        const urlConciliation = '@Url.Action("Edit")';
        let data;

        let isValidCode = false;
        let isValidName = false;
        let isValidEmail = false;
        let isValidPolicies = false;
        let isValidRequired = false;
        let isValidControlType = false;
        let isValidOperationType = false;

        const sendData = async () => {
            isValidCode = validateInputEmpty("Code", "El código es requerido", "CodeError");
            isValidName = validateInputEmpty("Name", "El nombre es requerido", "NameError");
            isValidEmail = validateEmail("Email", "El Email es requerido", "Digite un email válido", "EmailError");
            isValidPolicies = validateInputEmpty("input_select_filter_policies", "La política es requerida", "PoliciesError");
            isValidRequired = validateInputEmpty("input_select_filter_required", "Este campo es requerido", "RequiredError");
            isValidControlType = validateInputEmpty("ControlType", "El tipo de control es requerido", "ControlTypeError");
            isValidOperationType = validateInputEmpty("OperationType", "El tipo de operacion es requerido", "OperationTypeError");

            if (isValidCode && isValidName && isValidEmail && isValidPolicies && isValidRequired && isValidControlType && isValidOperationType) {
                document.getElementById('btn_container').style.display = 'none';
                document.getElementById('loading').style.display = 'flex';

                const CreationDateFormat = FormatDate($('#CreationDate').val()); 

                data = {
                    Code: $('#Code').val(),
                    Name: $('#Name').val(),
                    Email: $('#Email').val(),
                    Destination: $('#Destination').val(),
                    Policy: $('#input_select_filter_policies').val(),
                    PolicyCode: $('#PolicyCode').val(),
                    Required: $('#Required').val(),
                    State: true,
                    ControlType: $('#ControlType').val(),
                    OperationType: $('#OperationType').val(),
                    CreationDate: new Date(CreationDateFormat)
                }

                console.log(data)

                const result = await fetch(urlConciliation, {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })

                const json = await result.json();

                console.log(json);

                if (json.state == "Success") {
                    document.getElementById('LayoytSuccess').style.display = 'block';
                    document.getElementById('loading').style.display = 'none';
                    setTimeout(() => {
                        location.href = '/Conciliations/Conciliations';
                    }, 3000)
                } else {
                    document.getElementById('LayoytError').style.display = 'block';
                    document.getElementById('loading').style.display = 'none';
                }
            }
        }

        const validateInputEmpty = (idInput, mensaje, idError) => {
            if ($(`#${idInput}`).val() == "" || $(`#${idInput}`).val() == null) {
                $(`#${idError}`).text(`${mensaje}`);
                return false;
            } else {
                $(`#${idError}`).text("");
                return true;
            }
        }

        const FormatDate = (date) => {

            const validateAm = date.toString().includes("a. m.");
            const validatePm = date.toString().includes("p. m.");

            if (validateAm) {
                date = date.replace("a. m.", "AM")
            }

            if (validatePm) {
                date = date.replace("p. m.", "PM")
            }

            return date;
        }

        const validateEmail = (idInput, requiredMessage, formatMessage, idError) => {
            const email = $(`#${idInput}`).val();
            const emailFormat = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

            if (!email) {
                $(`#${idError}`).text(requiredMessage);
                return false;
            } else if (!emailFormat.test(email)) {
                $(`#${idError}`).text(formatMessage);
                return false;
            } else {
                $(`#${idError}`).text("");
                return true;
            }
        }
    </script>

}