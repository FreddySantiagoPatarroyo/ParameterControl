@using ParameterControl.Models.Indicator;
@model Indicator;
@{
    ViewData["Title"] = "Crear Indicadores";
    string MessageError = "Error al crear un indicador";
    string MessageSuccess = "El indicador se creo correctamente";
}

<partial name="_Menu" />

<div class="box_create">
    <div class="bg__blur"></div>
    <div asp-validation-summary="ModelOnly" class="text_error"></div>

    <form class="form__container">
        <div class="card__container">
            <div class="header_form">
                <img src="/images/iconApple.png" />
                <h1>Crear Indicadores</h1>
            </div>
            <div class="form_group">
                <div class="field">
                    <label asp-for="Name" class="label_form">Nombre*</label>
                    <div class="input">
                        <input asp-for="Name" placeholder="Digite el nombre" autocomplete="off" />
                    </div>
                    <span id="NameError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Description" class="label_form">Descripción*</label>
                    <div class="input">
                        <input asp-for="Description" placeholder="Digite la descripción" autocomplete="off" />
                    </div>
                    <span id="DescriptionError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Scenery" class="label_form">Escenario*</label>
                    <div class="input">
                        <input asp-for="Scenery" placeholder="Digite el escenario" autocomplete="off">
                    </div>
                    <span id="SceneryError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Parameter" class="label_form">Parametro*</label>
                    <div class="input">
                        <input asp-for="Parameter" placeholder="Digite el parametro" autocomplete="off">
                    </div>
                    <span id="ParameterError" class="text_error"></span>
                </div>
            </div>

            <div class="form_group">
                <div class="field">
                    <label asp-for="Formula" class="label_form">Formula*</label>
                    <div class="input">
                        <input asp-for="Formula" placeholder="Digite la formula" autocomplete="off">
                    </div>
                </div>
                <span id="FormulaError" class="text_error"></span>
            </div>

            <p class="note_text"><span>Nota: </span>Los campos con (*) son obligatorios</p>

            <div id="btn_container" class="btn_container">
                <a class="button button_secondary" asp-controller="Indicators" asp-action="Indicators"><p class="text font_bold">Cancelar</p></a>
                <a href="javascript:void(0)" onclick="sendData()" class="button button_primary"><p class="text font_bold">Crear</p></a>
            </div>
            <div id="loading" class="loading">
                <span class="loader"></span>
            </div>
            <div id="LayoytError" class="layout_content">
                <partial name="_MessageError" model="MessageError" />
            </div>
            <div id="LayoytSuccess" class="layout_content">
                <partial name="_MessageSuccess" model="MessageSuccess" />
            </div>
        </div>
    </form>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial.cshtml" />

    <script>
        const urlPolicy = '@Url.Action("Create")';
        let data;
        let isValidName = false;
        let isValidDescription = false;
        let isValidFormula = false;
        let isValidScenery = false;
        let isValidParameter = false;

        const sendData = async () => {
            isValidName = validateInput("Name", "El nombre es requerido", "NameError");
            isValidDescription = validateInput("Description", "La descripcion es requerido", "DescriptionError");
            isValidFormula = validateInput("Formula", "La Formula es requerido", "FormulaError");
            isValidScenery = validateInput("Scenery", "El esenario es requerido", "SceneryError");
            isValidParameter = validateInput("Parameter", "El parametro es requerido", "ParameterError");

            if (isValidName && isValidDescription && isValidFormula && isValidScenery && isValidParameter) {
                document.getElementById('btn_container').style.display = 'none';
                document.getElementById('loading').style.display = 'flex';

                data = {
                    Name: $('#Name').val(),
                    Description: $('#Description').val(),
                    Formula: $('#Formula').val(),
                    Scenery: $('#Scenery').val(),
                    Parameter: $('#Parameter').val(),
                    State: true
                }

                console.log(data)

                const result = await fetch(urlPolicy, {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })

                const json = await result.json();

                console.log(json);

                if (json.state == "Success") {
                    document.getElementById('LayoytSuccess').style.display = 'block';
                    document.getElementById('layout_message_success').innerHTML = json.message;
                    document.getElementById('loading').style.display = 'none';
                    setTimeout(() => {
                        location.href = '/Indicators/Indicators';
                    }, 3000)
                } else {
                    document.getElementById('LayoytError').style.display = 'block';
                    document.getElementById('layout_message_error').innerHTML = json.message;
                    document.getElementById('loading').style.display = 'none';
                }
            }
        }

        const validateEmpty = (idInput) => {
            if ($(`#${idInput}`).val() == "" || $(`#${idInput}`).val() == null) {
                return true;
            } else {
                return false;
            }
        }

        const validateInput = (idInput, requiredMessage, idError) => {
            const isEmpty = validateEmpty(idInput);
            if (isEmpty) {
                $(`#${idError}`).text(requiredMessage);
                return false;
            } else {
                $(`#${idError}`).text("");
                return true;
            }
        }
    </script>
}

